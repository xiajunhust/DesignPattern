
【1】单一职责原则：
就一个类而言，应该仅有一个引起它变化的原因。

【2】开放封闭原则：
软件实体（类、模块、函数等等）应该可以扩展，但是不可以修改。

当变化发生的时候，我们就创建抽象来隔离以后发生的同类变化。面对需求，对程序的改动是通过增加新代码来进行的，而不是更改现有的代码。
开放封闭原则是设计模式的核心所在。

【3】依赖倒转原则：
A、高层模块不应该依赖底层模块。两个都应该依赖抽象。
B、抽象不应该依赖细节。细节应该依赖抽象。

【4】里氏替换原则（LSP）：
子类型必须能够替换掉他们的父类型。
‘
